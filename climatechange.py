# -*- coding: utf-8 -*-
"""climatechange.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DG_h8oPFGmXRAp_YEmCmeod4mGqkDZRm
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from statsmodels.tsa.seasonal import seasonal_decompose
import seaborn as sns

# %matplotlib inline

import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv("/content/GlobalLandTemperatures_GlobalLandTemperaturesByCountry.csv")

df.head()

df.info()

df.describe()

df.dtypes

df.shape

df = df.dropna(how='any', axis=0)

df.shape

df.rename(columns={"dt":"Date", "AverageTemperature":"Avg_temp", "AverageTemperatureUncertainty":"confidence_interval_temp"}, inplace=True)
df.head()

df["Date"] = pd.to_datetime(df["Date"], format='%d-%m-%Y', errors='coerce')

# Drop rows with invalid dates (NaT)
df = df.dropna(subset=["Date"])

# Set 'Date' as the index
df.set_index("Date", inplace=True)

# Print the resulting DatetimeIndex
print(df.index)

df.describe()

df["Year"] = df.index.year
df.head()

# Ensure the index is sorted
df.sort_index(inplace=True)

# Slice the data for the range "1980" to "2013"
latest_df = df.loc["1980":"2013"]

# Display the first few rows of the result
print(latest_df.head())

latest_df[["Country", "Avg_temp"]].groupby(["Country"]).mean().sort_values("Avg_temp")

plt.figure(figsize=(10, 5))  # Set figure size
sns.barplot(x="Year", y="Avg_temp", data=latest_df, color="skyblue")  # Sky blue bars for better visibility
plt.xlabel("Year", fontsize=12)
plt.ylabel("Average Temperature (Â°C)", fontsize=12)
plt.title("Yearly Average Temperature", fontsize=14)
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis="y", linestyle="--", alpha=0.6)  # Add a light grid for better clarity
plt.show()

plt.figure(figsize=(9, 4))
sns.lineplot(x="Year", y="Avg_temp", data=latest_df, color="blue")  # Set line color to orange
plt.show()

resample_df = latest_df[["Avg_temp"]].resample("A").mean()

resample_df.head()

resample_df.plot(
    title="Temperature Changes from 1980-2013",
    figsize=(8, 5),
    color="red"  # Set the line color to red
)
plt.ylabel("Temperature", fontsize=12)
plt.xlabel("Year", fontsize=12)
plt.legend()
plt.show()

from statsmodels.tsa.stattools import adfuller

print("Dickey Fuller Test Results:")
test_df = adfuller(resample_df.iloc[:,0].values, autolag="AIC")
df_output = pd.Series(test_df[0:4], index=["Test Statistic", "p-value", "Lags Used", "Number of Observations Used"])
for key, value in test_df[4].items():
    df_output["Critical Value (%s)"%key] = value
print(df_output)

from statsmodels.tsa.seasonal import seasonal_decompose

# Perform decomposition (additive or multiplicative depending on your data)
result = seasonal_decompose(resample_df, model="additive", period=12)

# Extract components
trend = result.trend
seasonal = result.seasonal
residual = result.resid

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 12))

# Original data
plt.subplot(411)
plt.plot(resample_df, label="Original", color="blue")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()

# Trend
plt.subplot(412)
plt.plot(trend, label="Trend", color="orange")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()

# Seasonal
plt.subplot(413)
plt.plot(seasonal, label="Seasonal", color="green")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()

# Residual
plt.subplot(414)
plt.plot(residual, label="Residual", color="red")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()

plt.tight_layout()
plt.show()

rol_mean = resample_df.rolling(window=3, center=True).mean()

ewm = resample_df.ewm(span=3).mean()

rol_std = resample_df.rolling(window=3, center=True).std()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,5))

ax1.plot(resample_df, label='Original')
ax1.plot(rol_mean, label='Rolling Mean')
ax1.plot(ewm, label='Exponentially Weighted Mean')
ax1.set_title("Temperature Changes from 1980-2013", fontsize=14)
ax1.set_ylabel("Temperature", fontsize=12)
ax1.set_xlabel("Year", fontsize=12)
ax1.legend()

ax2.plot(rol_std, label='Rolling STD')
ax2.set_title("Temperature Changes from 1980-2013", fontsize=14)
ax2.set_ylabel("Temperature", fontsize=12)
ax2.set_xlabel("Year", fontsize=12)
ax2.legend()

plt.tight_layout()
plt.show()

